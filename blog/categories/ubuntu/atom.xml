<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ubuntu | GordyBlog]]></title>
  <link href="http://blog.gordontillman.info/blog/categories/ubuntu/atom.xml" rel="self"/>
  <link href="http://blog.gordontillman.info/"/>
  <updated>2015-01-09T09:42:08-06:00</updated>
  <id>http://blog.gordontillman.info/</id>
  <author>
    <name><![CDATA[Gordon Tillman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mounting External Drives - Ubuntu 14.04 and Chromebook]]></title>
    <link href="http://blog.gordontillman.info/blog/2015-01-08-mounting-external-drives---ubuntu-14.04-and-chrombook.html"/>
    <updated>2015-01-08T00:00:00-06:00</updated>
    <id>http://blog.gordontillman.info/blog/mounting-external-drives&#8212;ubuntu-14.04-and-chrombook</id>
    <content type="html"><![CDATA[<p>
OK, this post is part of my continuing experiments with an ASUS C200
Chromebook.  I have installed Ubuntu 14.04 using <i>crouton</i>.
</p>




<p>
I had created two partitions on a Micro SD Card, one as Fat32 (EsFat
actually) and the other as ext4.  
</p>




<p>
The FAT32 partition mounts at <code>/media/removeable/share</code> and the ext4
partition mounts at <code>/media/removeable/gordy</code>.  I tried storing
various projects on the ext4 partition but when I tried to build from
that partition I would get a permissions error.
</p>




<p>
<!-- more -->
</p>




<p>
Long story short, it turns out that the the ChromeOS side is mounting
the ext4 partition with <i>noexec</i> permissions.  That was causing all
the problems.  The solution turned out to be simple.  Just a single
command to remount the partition (issued from the Ubuntu side) does
the trick:
</p>




<div class="org-src-container">

<pre class="src src-sh">sudo mount -t ext4 -o remount,rw /dev/mmcblk1p1 /var/host/media/removable/gordy
</pre>
</div>




<p>
So, in the above command:
</p>




<ul class="org-ul">
<li><code>-t ext4</code> is the type of the partition.  I had previously formatted
it as ext4.
</li>
<li><code>-o remount,rw</code> tells the system to remote the partition with
read/write privileges
</li>
<li><code>/dev/mmcblk1p1</code> is the path to the partition that needs to be
mounted.  It will likely be different on your machine.  You can find
out what your device path is by just typing <code>mount</code> with no
arguments and grepping for the name of the volume.
</li>
<li><code>/var/host/media/removable/gordy</code> is the mount point.  A careful
reader will notice that this is different than what I wrote at the
top of the post (<code>/media/removeable/gordy</code>).  Well as it turns out
<code>/media/removeable</code> is a symbolic link to
<code>/var/host/media/removeable</code> and if you try to mount to
<code>/media/removeable/gordy</code> the mount command complains about trying
to follow too many symbolic links.  Please note that this mount path
will also be different on you machine, unless you named your
partition &#8220;gordy&#8221; as well. :-)
</li>
</ul>




<p>
Anyway, after remounting I am able to use my ext4 partition to hold
projects and be able to <code>./configure</code> and <code>make</code> out of directories on
the partition just fine.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Xmonad on Ubuntu 14.04 LTS]]></title>
    <link href="http://blog.gordontillman.info/blog/2015-01-08-installing-xmonad-on-ubuntu-14.04-lts.html"/>
    <updated>2015-01-08T00:00:00-06:00</updated>
    <id>http://blog.gordontillman.info/blog/installing-xmonad-on-ubuntu-14.04-lts</id>
    <content type="html"><![CDATA[<p>
After seeing with my own eyes how rapidly the very minimal the <a href="http://xmonad.org/">xmonad
windowing manager</a> starts up after logging in, I decided to upgrade an
old Linux box I have at the office that is running Ubuntu 14.04 LTS
(Trusy Tahr).
</p>




<p>
<!-- more -->
</p>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">David Brewer&#8217;s Easy Installation</h2>
<div class="outline-text-2" id="text-1">
<p>
David Brewer&#8217;s <a href="https://github.com/davidbrewer/xmonad-ubuntu-conf">xmonad-ubuntu-conf</a> is really well-documented and it is
what my buddy at work based his setup on.  I started by forking
David&#8217;s repository so that I could maintain serveral branches online
(one for each Linux box I install xmonad on).
</p>

<p>
After that, you just clone the repository out to <code>$HOME/.xmonad</code> and
run this command:
</p>

<div class="org-src-container">

<pre class="src src-sh">~/.xmonad/install-xmonad
</pre>
</div>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Keyboard Tweaks</h2>
<div class="outline-text-2" id="text-2">
<p>
I&#8217;m using a really nice and solid <a href="http://www.pckeyboard.com/">IBM Model M Keyboard</a> for my Linux
box.  It has no <i>Super</i> key and you <i>really</i> need one with xmonad.
</p>

<p>
I wanted to remap my <i>Alt</i> key on the right-hand side of the spacebar
as the <i>Super</i> key.  I found instructions <a href="http://askubuntu.com/questions/70931/how-to-set-right-alt-to-work-as-a-winsuper-key">here</a>:
</p>

<p>
Basically just edit <code>$HOME/.Xmodmap</code> (you may not already have this
file) and add the following:
</p>

<pre class="example">
! Free up Right-Alt for remapping
remove mod1 = Alt_R

! Remap Right-Alt to Super
clear mod4
keycode 108 = Super_R
add mod4 = Super_R
</pre>

<p>
Then just log out and back in again.
</p>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Desktop Backgrounds</h2>
<div class="outline-text-2" id="text-3">
<p>
This involves two steps.  The first it to select and save them, the
second is restore when you log in.  The <i>nitrogen</i> command is used to
do both.
</p>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1">Selecting and Saving</h3>
<div class="outline-text-3" id="text-3-1">
<p>
Start <i>nitrogen</i> as follows:
</p>

<div class="org-src-container">

<pre class="src src-sh">nitrogen --save &lt;path-to-pictures-directory&gt;
</pre>
</div>

<p>
Select the picture or pictures (if you have multiple desktops) that
you want.  Then exit the program.
</p>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2">Restoring Desktop when you Log in</h3>
<div class="outline-text-3" id="text-3-2">
<p>
Edit the file <code>$HOME/.xinitrc</code> (it may not already exist).
</p>

<p>
Add the following:
</p>

<pre class="example">
nitrogen --restore &amp;
</pre>
</div>
</div>
</div>




<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">Fixing the stalonetray with Dual Monitors</h2>
<div class="outline-text-2" id="text-4">
<p>
The <i>stalonetray</i> goes in the upper-right corner of the window.  On my
machine, with dual monitors, all my menu-bar stuff <i>except</i> for that
was on the left monitor.  The <i>stalonetray</i> was at the upper-right
corner of the right monitor and there was a little gray box in the
upper-right corner if the left monitor where it should have been.
</p>

<p>
Fixing this is easy.  First, determine the number of x-pixels in your
monitors.  I found this out by running the <i>Displays</i> app.  My
monitors are <code>1680x1050</code>.
</p>

<p>
Now edit the file <code>$HOME/.xmonad/start-xmonad</code>.  Search for
&#8220;stalonetray&#8221;.  Edit the <code>--geometry</code> setting.  
</p>

<p>
Mine <code>--geometry</code> setting had this value originally:
</p>

<pre class="example">
--geometry 5x1-0+0
</pre>

<p>
I changed it to ths:
</p>

<pre class="example">
--geometry 5x1-1680+0
</pre>

<p>
Restart <i>xmonad</i> and you are good to go.
</p>
</div>
</div>




<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">xmonad default bindings</h2>
<div class="outline-text-2" id="text-5">
<p>
Print out <a href="https://www.haskell.org/haskellwiki/File:Xmbindings.png">this PNG file</a>.
</p>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Chrooted Desktop in Background]]></title>
    <link href="http://blog.gordontillman.info/blog/2015-01-04-running-chrooted-desktop-in-background.html"/>
    <updated>2015-01-04T00:00:00-06:00</updated>
    <id>http://blog.gordontillman.info/blog/running-chrooted-desktop-in-background</id>
    <content type="html"><![CDATA[<p>
I made a post yesterday that covered the steps required to install
Ubuntu on an ASUS C200 Chromebook.  One thing I noticed was that,
while you are running Ubuntu, it ties up your terminal window and
makes it unavailable for doing other tasks.
</p>




<p>
<!-- more -->
</p>




<p>
According to some information that <a href="https://github.com/dnschneid/crouton">I found here</a>, you should be able to
accomplish this via a parameter supplied to the <code>startxfce4</code> command.
For example:
</p>




<pre class="example">
startxfce4 -b
</pre>




<p>
That didn&#8217;t seem to work for me.  The command still ran in the foreground.
I found that just using the standard Unix/Linux way worked fine:
</p>




<div class="org-src-container">

<pre class="src src-sh">startxfce4 &gt; /dev/null 2&gt;&amp;1 &amp;
</pre>
</div>




<p>
<i>Note:</i>  You cannot prefix this with <code>nohup</code> and close out the
terminal completely.  Doing so will exit the chroot environment and
terminate Ubuntu.  But at least you know have access to the
command-line in that terminal and you don&#8217;t have to look at a bunch of
debug messages.
</p>




<p>
So far this Chromebook experiment is going very well. Lot&#8217;s of fun!
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using a Chromebook as a Development Machine]]></title>
    <link href="http://blog.gordontillman.info/blog/2015-01-03-using-a-chromebook-as-a-development-machine.html"/>
    <updated>2015-01-03T00:00:00-06:00</updated>
    <id>http://blog.gordontillman.info/blog/using-a-chromebook-as-a-development-machine</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Introduction</h2>
<div class="outline-text-2" id="text-1">
<p>
I have been interested in seeing if would be possible to set-up a
<a href="https://www.google.com/chrome/devices/">Chromebook</a> so that some serious development work with it.  It&#8217;s a
given that you won&#8217;t be running any virtual machines on a Chromebook.
But at this point I think you can do pretty much any thing else you
might need to do.
</p>

<p>
<!-- more -->
</p>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">A Minimal Chromebook</h2>
<div class="outline-text-2" id="text-2">
<p>
First of all, let me say that I think that you need, at a minimum, a
Chromebook that has 4GB of RAM and 32GB of local storage.  I decided
on the <a href="http://smile.amazon.com/gp/product/B00KGI4XBI">ASUS model C200MA-EDU-4GB</a>.  This machine is very inexpensive,
has a decent display and keyboard, and meets my minimum RAM/storage
requirements.
</p>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Options</h2>
<div class="outline-text-2" id="text-3">
<p>
As I see it, there are at least two options you can choose that will
let you use a Chromebook as a serious development machine.  I have
tried both of these and am now using a combination of the two.
</p>

<p>
The first option is to use a basically stock Chromebook in conjunction
with an inexpensive Virtual Private Server (VPS).  For this to be a
viable option you must be doing your work someplace where you have a
decent Internet connection.  
</p>

<p>
You rent a VPS, install a nice Linux. I like Ubuntu 14.04 LTS (Trusty
Tahr).  You install all of your tools there and use the Chromebook as
a portable terminal that lets you access these tools.
</p>

<p>
But what if you want the option of doing useful work from anywhere,
whether or not you have a good Internet connection? In that case, we
take a look at the second option.
</p>

<p>
The second option is to enable developer mode on your Chromebook,
install Linux in a chroot environment along with whatever tools you
need, and work in ChromeOS or your chroot environment as needed.
</p>

<p>
This turns out to be extremely easy to accomplish.  The remainder of
this post will cover the steps I followed to get this going.
</p>
</div>
</div>




<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">Enabling dev mode</h2>
<div class="outline-text-2" id="text-4">
<p>
The exact procedure required to enable dev mode will vary from one
Chromebook to another.  For an Asus C200 it is extremely simple.
</p>

<ol class="org-ol">
<li>Tap the power button while pressing and holding the <i>esc</i> and
<i>refresh</i> buttons.  Note that the <i>refresh</i> button is on the top
row of keys and looks like a circular arrow.
</li>
<li>The Chromebook will reboot and you will see a screen that tells you
that Chrome OS is missing or damaged.  Just hit <code>ctrl-d</code> and then
<i>enter</i> to continue.
</li>
<li>The computer will restart and you will see a screen that tells you
OS verification is off.  Hit <code>ctrl-d</code> to continue.
</li>
<li>Go take a break while your Chromebook&#8217;s data is reset.  I didn&#8217;t
pay attention to how long it took, but you will get a textual
progress bar at the top of the window while this is in progress.
</li>
<li>When it finally comes back up just connect to your wireless network
and log-in as normal.
</li>
</ol>

<p>
<b>Note:</b> From this point on you will always see the verification screen
when you restart.  No worries, just hit <code>ctrl-d</code> to proceed.
</p>
</div>
</div>




<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">Installing the Crouton Integration Chrome extension</h2>
<div class="outline-text-2" id="text-5">
<p>
This is pretty cool.  It lets you run your Linux windowing manager in
a Chrome frame that shows up on your dock at the bottom of the
screen.  Let&#8217;s go ahead and install it now so that it will be in place
when your Ubuntu installation has finished.
</p>

<ul class="org-ul">
<li>From Chrome, navigate <a href="https://chrome.google.com/webstore/detail/crouton-integration/gcpneefbbnfalgjniomfjknbcgkbijom">to this URL</a> and install the extension.  That&#8217;s
it!
</li>
</ul>
</div>
</div>




<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">Installing Ubuntu via Crouton</h2>
<div class="outline-text-2" id="text-6">
<p>
Crouton stands for <i>Chromium OS Universal Chroot Environment</i>.  It is
a very nice shell script that greatly simplifies the process of
installing and running your Linux environment on the Chromebook.
</p>

<ul class="org-ul">
<li><a href="https://goo.gl/fd3zc">Click here</a> from Chrome to download the latest version of the script.
</li>
<li>Pull up a terminal window as follows:
<ul class="org-ul">
<li>Hit <code>ctrl+alt+t</code>
</li>
<li>Type <code>shell</code> and hit <i>enter</i>.
</li>
<li>Type <code>cd ~/Downloads</code> and hit <i>enter</i>.
</li>
<li>If you then enter <code>ls</code> you should see the Crouton script you just
downloaded.
</li>
</ul>
</li>
</ul>

<p>
The instructions that follow assume that you want to install Ubuntu
14.04 LTS using the <code>xfce</code> window manager.
</p>

<ul class="org-ul">
<li>Type <code>sudo sh -e ./crouton -r trusty -t xfce,xiwi</code> and hit <i>enter</i>.
</li>
<li>After everything is installed you will be asked to enter a username
and password.
</li>
</ul>
</div>
</div>




<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">Running Ubuntu</h2>
<div class="outline-text-2" id="text-7">
<p>
Here is the basic procedure for entering your chroot environment and
starting your Ubuntu environment.
</p>

<ul class="org-ul">
<li>If necessary, get a terminal session going.  Remember the steps to
do this?
<ul class="org-ul">
<li>Hit <code>ctrl+alt+t</code>
</li>
<li>Type <code>shell</code> and hit <i>enter</i>.
</li>
</ul>
</li>
<li>Enter the chroot environment by typing <code>sudo enter-chroot</code> and
hitting <i>enter</i>.
</li>
<li>Start up the Ubuntu UI by typing <code>startxfce4</code> and hitting <i>enter</i>.
</li>
<li>As a shortcut you can do the following:
<ul class="org-ul">
<li>Pull up a terminal session
</li>
<li>Types <code>sudo startxfce4</code> and hit <i>enter</i>.
</li>
</ul>
</li>
</ul>


<p>
By default this will start up the Ubuntu windowing system in full
screen mode.  To toggle fullscreen mode just hit what would be the F4
button on the top row of the keyboard.  On my Asus this button looks
like a rectangle with little arrow-heads in the top-left and
bottom-right corners.  Google calls this <i>immersive mode</i>.
</p>
</div>
</div>




<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8">Enable Verified Boot and Auto Updates</h2>
<div class="outline-text-2" id="text-8">
<p>
This tip came from <a href="https://sites.google.com/site/chromeoswikisite/home/what-s-new-in-dev-and-beta/shell-acess-with-verified-boot">here</a>.  Enabling developer mode will disable
verified boot by default.  To fix it, just do the following:
</p>

<ul class="org-ul">
<li>Open a shell and become root
<div class="org-src-container">

<pre class="src src-sh">Control-Alt-T
shell
sudo su -
</pre>
</div>
</li>
<li>If you have not already done so, set a password for the <i>root</i> user
by entering the following command and following the prompts:
<div class="org-src-container">

<pre class="src src-sh">chromeos-setdevpasswd
</pre>
</div>
</li>
<li>Enable verified boot from the root shell:
<div class="org-src-container">

<pre class="src src-sh">crossystem <span style="color: #e7c547;">dev_boot_usb</span>=0 <span style="color: #e7c547;">dev_boot_signed_only</span>=1
</pre>
</div>
</li>
</ul>

<p>
Please see the <a href="https://sites.google.com/site/chromeoswikisite/home/what-s-new-in-dev-and-beta/shell-acess-with-verified-boot">original post</a> for more information and some screen shots.
</p>
</div>
</div>




<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9">References</h2>
<div class="outline-text-2" id="text-9">
<p>
These are some of the sites I read through when setting up the
Chromebook:
</p>

<ul class="org-ul">
<li><a href="https://sites.google.com/site/chromeoswikisite/home/what-s-new-in-dev-and-beta/shell-acess-with-verified-boot">Shell Access With Verified Boot And Auto Updates</a>
</li>
<li><a href="http://liliputing.com/2014/06/asus-c200-chromebook-enabling-dev-mode-installing-ubuntu.html">Asus C200 Chromebook: Enabling dev mode, installing Ubuntu</a>
</li>
<li><a href="http://www.howtogeek.com/162120/how-to-install-ubuntu-linux-on-your-chromebook-with-crouton/">How to Install Ubuntu Linux on Your Chromebook with Crouton</a>
</li>
<li><a href="https://github.com/dnschneid/crouton">David Schneider&#8217;s Crouton GitHub Page</a>
</li>
<li><a href="https://github.com/dnschneid/crouton/wiki/Security">David Schneider on Security</a>
</li>
<li><a href="https://sites.google.com/site/chromeoswikisite/home">The Chrome OS Wiki</a>
</li>
<li><a href="http://tomwwolf.com/chromebook-14-compedium/chromebook-crouton-cookbook/">Tom Wolf&#8217;s Crouton Cookboook</a>
</li>
<li><a href="https://plus.google.com/u/0/+FrancoisBeaufort/posts/JDVkXALPcNq">François Beaufort&#8217;s Google+ Profile Page</a>
</li>
<li><a href="http://fuyuko.net/basic-tweaks-and-tips-for-crouton-in-chromebook/">Fuyuko Gratton&#8217;s Basic Tweaks and Tips for Crouton in Chromebook</a>
</li>
<li><a href="http://www.postslush.com/2014/12/crouton-ubuntu-running-in-browser-tab.html">Crouton Ubuntu running in a browser tab of a Chromebook</a>
</li>
<li><a href="https://support.google.com/chromebook/answer/183093?hl=en">Google&#8217;s Supported file types and external devices</a>
</li>
<li><a href="https://support.google.com/chromebook/answer/1047364?hl=en">Google&#8217;s Chromebook Keyboard Features</a>
</li>
<li><a href="http://vpsdime.com/">vpsdime</a> - Where my VPS lives
</li>
</ul>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SBCL and Slime on Ubuntu 14.04]]></title>
    <link href="http://blog.gordontillman.info/blog/2015-01-03-sbcl-and-slime-on-ubuntu-14.04.html"/>
    <updated>2015-01-03T00:00:00-06:00</updated>
    <id>http://blog.gordontillman.info/blog/sbcl-and-slime-on-ubuntu-14.04</id>
    <content type="html"><![CDATA[<p>
This post describes how to install and configure Steel Bank Common
Lisp (SBCL) with SLIME (Superior Lisp Interaction Mode) that is
installed via <a href="http://www.quicklisp.org/">Quicklisp</a> on Ubuntu 14.04 LTS (Trusty Tahr).
</p>




<p>
<!-- more -->
</p>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Install SBCL</h2>
<div class="outline-text-2" id="text-1">
<div class="org-src-container">

<pre class="src src-sh">sudo apt-get instal sbcl sbcl-doc
</pre>
</div>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Install Quicklisp</h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">

<pre class="src src-sh">curl -O http://beta.quicklisp.org/quicklisp.lisp
sbcl --load quicklisp.lisp
(quicklisp-quickstart:install)
(ql:add-to-init-file)
</pre>
</div>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Install slime via quicklisp</h2>
<div class="outline-text-2" id="text-3">
<p>
While still in the SBCL session
</p>

<div class="org-src-container">

<pre class="src src-sh">(ql:quickload <span style="color: #70c0b1;">"quicklisp-slime-helper"</span>)
</pre>
</div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
